pipeline{
    agent any
    stages {
	stage ('Artifactory configuration') {
            steps {
                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "artifactory",
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "artifactory",
                    releaseRepo: "libs-release",
                    snapshotRepo: "libs-snapshot"
                )
            }
        }
	stage ('Exec Maven') {
            steps {
                rtMavenRun (
                    tool: 'maven',
                    pom: 'pom.xml',
                    goals: 'clean package -Dmaven.test.skip=true',
                    deployerId: "MAVEN_DEPLOYER",
                    resolverId: "MAVEN_RESOLVER"
                )
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "artifactory"
                )
            }
        }
        //stage('Maven Build') {
          //  steps {
            //    sh 'mvn clean package -Dmaven.test.skip=true'
              //  }
       // }
	stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonarscanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage('Dcoker Deploy') {
            steps {
                // sh 'cd /home/jnaidu023/capstone/spring-petclinic'
				sh "docker image build -t petclinic ."
				sh "docker container stop petclinic | true"
				sh "docker container rm petclinic | true"
				sh "docker container run -d --name petclinic --link mysql:mysql -p 8085:8080 petclinic"
                }
        }
        }
}
